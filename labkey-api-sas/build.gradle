import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.GroupNames
import org.labkey.gradle.util.PomFileHelper
import org.labkey.gradle.plugin.extension.TeamCityExtension

buildscript {
    repositories {
        jcenter()
        maven {
            url "${artifactory_contextUrl}/plugins-release"
        }
        if (gradlePluginsVersion.contains("SNAPSHOT"))
        {
            maven {
                url "${artifactory_contextUrl}/plugins-snapshot-local"
            }
        }
    }
    dependencies {
        classpath "org.labkey.build:gradlePlugins:${gradlePluginsVersion}"
        // N.B.  We use the "old-fashioned" way of applying the artifactory plugin because if we use
        // the plugins block below and specify a version number, the following error happens if building
        // in conjunction with LabKey server (i.e., when including this project in the server's build.gradle
        //    Error resolving plugin [id: 'com.jfrog.artifactory', version: '4.13.0', apply: false]
        //    > Plugin request for plugin already on the classpath must not include a version
        // We could instead include the plugin without a version number, which would work until
        // some change in the latest version of the plugin came along that we aren't compatible with.
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${artifactoryPluginVersion}"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    maven {
        url "${artifactory_contextUrl}/libs-release"

        if (hasProperty('artifactory_user') && hasProperty('artifactory_password'))
        {
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
            authentication {
                basic(BasicAuthentication)
                // enable preemptive authentication to get around https://www.jfrog.com/jira/browse/RTFACT-4434
            }
        }
    }
}

// TODO remove once client-api distribution no longer requires this
buildDir = new File(project.rootProject.buildDir, "/remoteapi/sas")

group 'org.labkey.api'

version '1.0.0'

// We add the TeamCity extension here if it doesn't exist because we will use the build
// number property from TeamCity in the distribution artifact names, if present.
TeamCityExtension teamCityExt  = project.getExtensions().findByType(TeamCityExtension.class)
if (TeamCityExtension.isOnTeamCity(project) && teamCityExt == null)
    project.extensions.create("teamCity", TeamCityExtension, project)

configurations {
    remoteApi
}

BuildUtils.addLabKeyDependency(project: project, config: "remoteApi", depProjectPath: BuildUtils.getRemoteApiProjectPath(gradle), depVersion: project.labkeyClientApiVersion)

// TODO change name and destination once client-api no longer requires this
project.task("distribution",
        group: GroupNames.DISTRIBUTION,
        description: "Create a zip file for the SAS API client distribution containing the SAS macros, java client api jar and its dependencies",
        type: Zip,
        {Zip zip ->
            zip.from (project.file("macros"))
            zip.from project.configurations.remoteApi
            zip.into zip.archiveBaseName
            zip.destinationDirectory = project.rootProject.file("dist/client-api/sas")
        }
)

artifacts {
    archives project.tasks.distribution
}

project.afterEvaluate {
    project.publishing {
        publications {
            libs(MavenPublication) {
                groupId = project.group
                artifact project.tasks.distribution
                pom {
                    name = "LabKey Server SAS Client API"
                    description = "Library of macros for use in accessing LabKey Server via SAS"
                    url = PomFileHelper.LABKEY_ORG_URL
                    developers PomFileHelper.getLabKeyTeamDevelopers()
                    licenses PomFileHelper.getApacheLicense()
                    organization PomFileHelper.getLabKeyOrganization()
                    scm {
                        connection = 'scm:git:https://github.com/LabKey/labkey-api-java/sas'
                        developerConnection = 'scm:git:https://github.com/LabKey/labkey-api-java/sas'
                        url = 'scm:git:https://github.com/LabKey/labkey-api-java/sas'
                    }
                }
            }
        }

        if (project.hasProperty('doClientApiPublishing'))
        {
            apply plugin: 'com.jfrog.artifactory'
            artifactory {
                contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
                publish {
                    repository {
                        repoKey = BuildUtils.getRepositoryKey(project)
                        if (project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password'))
                        {
                            username = artifactory_user
                            password = artifactory_password
                        }
                        maven = true
                    }
                    defaults
                            {
                                publishPom = true
                                publishIvy = false
                            }
                }
            }

            project.artifactoryPublish {
                publications('libs')
            }
        }
    }
    project.model {
        tasks.publishLibsPublicationToMavenLocal {
            enabled = false
        }
    }
}
