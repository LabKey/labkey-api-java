package org.labkey.remoteapi.internal;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ResponseUtils
{
    private ResponseUtils()
    {
        // Static utility class. Do not construct.
    }

    /**
     * Make a thoroughly unmodifiable copy of a Map that was generated by a JSONObject.<br>
     * Any nested {@link Map}s or {@link List}s will be made unmodifiable.
     * @param map Map to copy
     * @return Unmodifiable copy of the provided Map
     * @see JSONObject#toMap()
     */
    public static Map<String, Object> deepUnmodifiableMap(Map<String, Object> map)
    {
        Map<String, Object> mapCopy = new LinkedHashMap<>(map.size());
        for (String key : map.keySet())
        {
            mapCopy.put(key, processValueForDeepCopy(map.get(key)));
        }
        return Collections.unmodifiableMap(mapCopy);
    }

    /**
     * Make a thoroughly unmodifiable copy of a List that was generated by a JSONArray.<br>
     * Any nested {@link Map}s or {@link List}s will also be made unmodifiable.
     * @param list List to copy
     * @return Unmodifiable copy of the provided Map
     * @see JSONArray#toList()
     */
    public static List<Object> deepUnmodifiableList(List<Object> list)
    {
        List<Object> listCopy = new ArrayList<>(list.size());
        for (Object value : list)
        {
            listCopy.add(processValueForDeepCopy(value));
        }
        return Collections.unmodifiableList(listCopy);
    }

    private static Object processValueForDeepCopy(Object value)
    {
        if (value == null)
        {
            return null;
        }
        else if (value instanceof Map map)
        {
            return deepUnmodifiableMap(map);
        }
        else if (value instanceof List list)
        {
            return deepUnmodifiableList(list);
        }
        else if (value == JSONObject.wrap(value))
        {
            return value;
        }
        else
        {
            throw new IllegalArgumentException("Invalid type for deep copy: " + value.getClass());
        }
    }
}
