import org.labkey.gradle.plugin.LabKey
import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.GroupNames
import org.labkey.gradle.util.PomFileHelper

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "${artifactory_contextUrl}/plugins-release"
        }
        if (gradlePluginsVersion.contains("SNAPSHOT"))
        {
            maven {
                url "${artifactory_contextUrl}/plugins-snapshot-local"
            }
        }
    }
    dependencies {
        classpath "org.labkey.build:gradlePlugins:${gradlePluginsVersion}"
        // N.B.  We use the "old-fashioned" way of applying the artifactory plugin because if we use
        // the plugins block below and specify a version number, the following error happens if building
        // in conjunction with LabKey server (i.e., when including this project in the server's build.gradle
        //    Error resolving plugin [id: 'com.jfrog.artifactory', version: '4.13.0', apply: false]
        //    > Plugin request for plugin already on the classpath must not include a version
        // We could instead include the plugin without a version number, which would work until
        // some change in the latest version of the plugin came along that we aren't compatible with.
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${artifactoryPluginVersion}"
    }
}

plugins {
    id 'java-library'
    id 'java'
    id 'maven-publish'
    id "com.jfrog.bintray" version "${bintrayPluginVersion}" apply false
}

repositories {
    maven {
        url "${artifactory_contextUrl}/libs-release"

        if (hasProperty('artifactory_user') && hasProperty('artifactory_password'))
        {
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
            authentication {
                basic(BasicAuthentication)
                // enable preemptive authentication to get around https://www.jfrog.com/jira/browse/RTFACT-4434
            }
        }
    }
}

// TODO remove this and use default once client-api distribution doesn't need it
buildDir = new File(project.rootProject.buildDir, "/remoteapi/labkey-api-java")

group "org.labkey.api"

version "1.4.0-SNAPSHOT"

dependencies {
    implementation "org.apache.httpcomponents:httpmime:${httpmimeVersion}"
    api ("com.googlecode.json-simple:json-simple:${jsonSimpleVersion}")
            {
                // exclude this because it gets in the way of our own JSON object implementations from server/api
                exclude group: "org.json", module:"json"
            }
    implementation "net.sf.opencsv:opencsv:${opencsvVersion}"
    implementation "commons-logging:commons-logging:${commonsLoggingVersion}"
    api "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    implementation "commons-codec:commons-codec:${commonsCodecVersion}"
    api "org.apache.httpcomponents:httpcore:${httpcoreVersion}"
}

jar {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility

    sourceSets
            {
                main {
                    java {
                        srcDirs = ['src']
                    }
                }
            }

    libsDirName = "jar"
}

project.tasks.withType(JavaCompile) {
    sourceCompatibility = project.ext.sourceCompatibility
    targetCompatibility = project.ext.targetCompatibility
}

// The maven-publish plugin will, by default, publish a metadata file alongside the other
// artifacts.  Its extension is .module, which might get confused with our own .module files.
// We could publish these files for everything but .module files, but for now we disable always
// https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html
project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

project.task("fatJar",
        description: "Generate single jar file containing the api and all its dependent classes",
        group: GroupNames.BUILD,
        type: Jar,
        {
            Jar jar ->
                jar.from sourceSets.main.output
                jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                jar.from { configurations.default.collect { it.isDirectory() ? it : zipTree(it) }}
                jar.setArchiveVersion(project.version)
                jar.classifier LabKey.FAT_JAR_CLASSIFIER
                jar.dependsOn project.tasks.jar
                jar.into('lib') {
                    from tasks.jar
                    from configurations.default
                }
        }
)

if (project.hasProperty('javaClientDir'))
{
    project.task('deployFatJar', description: "Generate java client 'all' jar file and deploy to a given directory. For example, a host app other than LabKey Server",
            type: Copy) {
        from fatJar
        into project.javaClientDir
    }
}

project.task('javadocJar', description: "Generate jar file of javadoc files", type: Jar) {Jar jar ->
            jar.from project.tasks.javadoc.destinationDir
            jar.group GroupNames.DISTRIBUTION
            jar.archiveClassifier.set(LabKey.JAVADOC_CLASSIFIER)
            jar.dependsOn project.tasks.javadoc
        }

project.task('sourcesJar', description: "Generate jar file of source files", type: Jar) {Jar jar ->
            jar.from project.sourceSets.main.allJava

            jar.group GroupNames.DISTRIBUTION
            jar.classifier LabKey.SOURCES_CLASSIFIER
}

project.artifacts {
    archives project.tasks.sourcesJar
    archives project.tasks.javadocJar
    archives project.tasks.fatJar
}

def libDescription = "The client-side library for Java developers is a separate JAR from the LabKey Server code base. It can be used by any Java program, including another Java web application."

project.afterEvaluate {
    project.publishing {
        publications {
            libs(MavenPublication) {
                groupId = project.group
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = "LabKey Server Java Client API"
                    description = libDescription
                    url = PomFileHelper.LABKEY_ORG_URL
                    developers PomFileHelper.getLabKeyTeamDevelopers()
                    licenses PomFileHelper.getApacheLicense()
                    organization PomFileHelper.getLabKeyOrganization()
                    scm {
                        connection = 'scm:git:https://github.com/LabKey/labkey-api-java'
                        developerConnection = 'scm:git:https://github.com/LabKey/labkey-api-java'
                        url = 'scm:git:https://github.com/LabKey/labkey-api-java/labkey-client-api'
                    }
                }

                project.tasks.each {
                    if (it instanceof Jar)
                    {
                        artifact it
                    }
                }
            }
        }

        if (project.hasProperty('doClientApiPublishing'))
        {
            apply plugin: 'com.jfrog.artifactory'
            artifactory {
                contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
                publish {
                    repository {
                        repoKey = BuildUtils.getRepositoryKey(project)
                        if (project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password'))
                        {
                            username = artifactory_user
                            password = artifactory_password
                        }
                        maven = true
                    }
                    defaults
                            {
                                publishPom = true
                                publishIvy = false
                            }
                }
            }

            project.artifactoryPublish {
                project.tasks.each {
                    if (it instanceof Jar)
                    {
                        dependsOn it
                    }
                }
                publications('libs')
            }
        }

    }
    project.model {
        tasks.publishLibsPublicationToMavenLocal {
            enabled = false
        }
    }
}

// This section is used for publishing the jar files to bintray and then on to maven central.
if (project.hasProperty('bintray_user')
        && project.hasProperty('bintray_api_key')
        && project.hasProperty('gpg_passphrase')
        && project.hasProperty('sonatype_username')
        && project.hasProperty('sonatype_password'))
{
    apply plugin: 'com.jfrog.bintray'
    bintray {
        user = project.bintray_user
        key = project.bintray_api_key
        publications = ['libs']
        publish = true
        pkg {
            repo = project.version.endsWith('SNAPSHOT') ? 'libs-snapshot' : 'libs-release'
            desc = libDescription
            websiteUrl = PomFileHelper.LABKEY_ORG_URL
            name = project.name
            userOrg = 'labkey'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/LabKey/labkey-api-java'
            version {
                name = project.version
                desc = "LabKey Java Client API ${project.version}"
                released = new Date()
                gpg {
                    sign = true
                    passphrase = project.gpg_passphrase
                }

                mavenCentralSync {
                    sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                    user = project.sonatype_username //OSS user token: mandatory
                    password = project.sonatype_password //OSS user password: mandatory
                    close = '1'
                    //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. 
                    //You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
    }
}

