<project name="remoteapi" basedir="." default="build">

    <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask"
        classpath="../../external/lib/build/one-jar-ant-task-0.96.jar" onerror="report"/>

    <property name="server.dir" value="../../server"/>

    <!-- Grab product.version set by TeamCity if it is there -->
    <condition property="product.version" value="${teamcity.product.version}" else="DevBuild" >
        <isset property="teamcity.product.version"/>
    </condition>

    <property name="source.dir" value="${basedir}/src"/>
    <property name="build.dir" value="${basedir}/../../build/client-api/java"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.jar.dir" value="${build.dir}/jar"/>
    <property name="build.jar.name" value="labkey-client-api-${product.version}.jar"/>
    <property name="build.jar.complete.name" value="labkey-client-api-${product.version}-complete.jar"/>
    <property name="dist.dir" value="${basedir}/../../dist/client-api/java"/>
    <property name="exploded.dir" value="${build.dir}/exploded"/>
    <property name="build.source.dir" value="${build.dir}/src"/>
    <!-- If we're being called from the installer's build.xml, labkey.version will already be set to the right build number -->
    <property name="labkey.version" value="${product.version}" />
    <property name="dist.source.name" value="LabKey${labkey.version}-ClientAPI-Java" />
    <property name="exploded.ver.dir" value="${exploded.dir}/LabKey${labkey.version}-ClientAPI-Java"/>
    <property name="dist.source.dir" value="${build.source.dir}/LabKey${labkey.version}-ClientAPI-Java-src"/>
    <property name="doc.dir" value="${exploded.ver.dir}/doc"/>
    <property name="zip.name" value="LabKey${labkey.version}-ClientAPI-Java.zip"/>
    <property name="source.zip.name" value="LabKey${labkey.version}-ClientAPI-Java-src.zip"/>
    <property name="license.source.path" value="${server.dir}/installer/license.rtf"/>
    <property name="license.dest.file" value="license.rtf"/>
    <property name="readme.file" value="README.html"/>

    <property name="build.sysclasspath" value="ignore" />
    
    <path id="component.class.path">
        <fileset dir="lib" includes="*.jar"/>
    </path>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${build.classes.dir}"/>
        <!-- Target 1.7  -->
        <javac srcdir="${source.dir}" destdir="${build.classes.dir}"
               classpathref="component.class.path"
               target="1.7"
               source="1.7"
               debug="true"/>
        <copy file="${source.dir}/log4j.xml" todir="${build.classes.dir}"/>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${build.jar.dir}"/>
        <jar destfile="${build.jar.dir}/${build.jar.name}" basedir="${build.classes.dir}"/>
    </target>

    <target name="javadoc">
        <javadoc sourcepath="${source.dir}" destdir="${doc.dir}" classpathref="component.class.path"
                 windowtitle="LabKey Client API Library for Java Documentation"
                 author="true" version="true" packagenames="org.labkey.remoteapi.*"
                 excludepackagenames="org.labkey.remoteapi.sas,org.labkey.remoteapi.test,org.labkey.remoteapi.query.jdbc"/>
    </target>

    <target name="dist" depends="build,javadoc">
        <delete file="${dist.dir}/${zip.name}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${exploded.dir}"/>
        <mkdir dir="${exploded.ver.dir}"/>
        <copy file="${build.jar.dir}/${build.jar.name}" tofile="${exploded.ver.dir}/${build.jar.name}"/>
        <copy todir="${exploded.ver.dir}/lib/">
            <fileset dir="lib" includes="*.jar"/>
        </copy>
        <copy file="${license.source.path}" tofile="${exploded.ver.dir}/${license.dest.file}"/>
        <copy file="${readme.file}" tofile="${exploded.ver.dir}/${readme.file}"/>
        <zip basedir="${exploded.dir}" destfile="${dist.dir}/${zip.name}"/>

        <delete file="${dist.dir}/${source.zip.name}"/>
        <mkdir dir="${dist.source.dir}"/>
        <copy file="${license.source.path}" tofile="${dist.source.dir}/${license.dest.file}"/>
        <copy todir="${dist.source.dir}">
            <fileset dir="src"/>
        </copy>
        <zip basedir="${build.source.dir}" destfile="${dist.dir}/${source.zip.name}"/>

        <!-- Create a stable file name so that TeamCity can serve it up directly through its own UI -->
        <zip basedir="${doc.dir}" destfile="${basedir}/../../dist/TeamCity-ClientAPI-Java-Docs.zip"/>

        <one-jar destfile="${dist.dir}/${build.jar.complete.name}" manifest="manifest.mf">
            <main>
                <!-- Construct main.jar from classes and source code -->
                <fileset dir="${build.dir}/classes"/>
            </main>
            <lib>
                <fileset file="./lib/*.jar" />
            </lib>
        </one-jar>
    </target>

    <target name="build">
        <uptodate property="remoteapi_uptodate" targetfile="${build.jar.dir}/${build.jar.name}">
            <srcfiles dir="${source.dir}"/>
        </uptodate>
        <antcall target="build_if_dirty"/>
    </target>

    <target name="build_if_dirty" unless="remoteapi_uptodate">
        <antcall target="jar"/>
    </target>

    <target name="rebuild" depends="clean,build"/>
</project>