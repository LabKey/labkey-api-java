<?xml version="1.0"?>
<project name="remoteapi" basedir="." default="build" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask"
        classpath="../../external/lib/build/one-jar-ant-task-0.96.jar" onerror="report"/>

    <property name="server.dir" value="../../server"/>
    <property environment="env"/>

    <!-- Grab product.version set by TeamCity if it is there -->
    <condition property="product.version" value="${teamcity.product.version}" else="17.10-SNAPSHOT" >
        <isset property="teamcity.product.version"/>
    </condition>

    <property name="source.dir" value="${basedir}/src"/>
    <property name="build.dir" value="${basedir}/../../build/client-api/java"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.jar.dir" value="${build.dir}/jar"/>
    <property name="build.jar.name" value="labkey-client-api-${product.version}.jar"/>
    <property name="build.jar.complete.name" value="labkey-client-api-${product.version}-complete.jar"/>
    <property name="dist.dir" value="${basedir}/../../dist/client-api/java"/>
    <property name="exploded.dir" value="${build.dir}/exploded"/>
    <property name="build.source.dir" value="${build.dir}/src"/>
    <!-- If we're being called from the installer's build.xml, labkey.version will already be set to the right build number -->
    <property name="labkey.version" value="${product.version}" />
    <property name="dist.source.name" value="LabKey${labkey.version}-ClientAPI-Java" />
    <property name="exploded.ver.dir" value="${exploded.dir}/LabKey${labkey.version}-ClientAPI-Java"/>
    <property name="dist.source.dir" value="${build.source.dir}/LabKey${labkey.version}-ClientAPI-Java-src"/>
    <property name="doc.dir" value="${exploded.ver.dir}/doc"/>
    <property name="zip.name" value="LabKey${labkey.version}-ClientAPI-Java.zip"/>
    <property name="source.zip.name" value="LabKey${labkey.version}-ClientAPI-Java-src.zip"/>
    <property name="readme.file" value="README.html"/>

    <property name="build.sysclasspath" value="ignore" />

    <property name="groupId" value="org.labkey"/>
    <property name="artifactId" value="labkey-client-api"/>
    <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2"/>
    <property name="maven-repository-id" value="sonatype-nexus-staging"/>
    <property name="maven-jar" value="${build.dir}/${artifactId}-${labkey.version}.jar"/>
    <property name="maven-javadoc-dir" value="${build.dir}/maven-javadoc"/>
    <property name="maven-javadoc-jar" value="${build.dir}/${artifactId}-${labkey.version}-javadoc.jar"/>
    <property name="maven-sources-jar" value="${build.dir}/${artifactId}-${labkey.version}-sources.jar"/>

    <path id="component.class.path">
        <fileset dir="lib" includes="*.jar"/>
    </path>
    
    <!-- the normal classpath -->
    <path id="classpath">
        <pathelement location="${build.classes.dir}" />
        <fileset dir="${build.jar.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Make Maven Central Release -->
    <!-- ================================================================== -->
    <target name="release" depends="compile" description="--> generate the release distribution">
        <!-- build the main artifact -->
        <jar jarfile="${maven-jar}" basedir="${build.classes.dir}" />
        <fail message="Unsupported Java version: ${java.version}. Javadoc requires Java version 7u25 or greater.">
            <condition>
                <or>
                    <matches string="${java.version}" pattern="1.7.0_2[01234].+" casesensitive="false" />
                    <matches string="${java.version}" pattern="1.7.0_2[01234].+" casesensitive="false" />
                    <matches string="${java.version}" pattern="1.7.0_1.+" casesensitive="false" />
                    <equals arg1="${ant.java.version}" arg2="1.6" />
                    <equals arg1="${ant.java.version}" arg2="1.5" />
                </or>
            </condition>
        </fail>
        <!-- build the javadoc artifact -->
        <javadoc
            destdir="${maven-javadoc-dir}"
            classpathref="component.class.path"
            author="true"
            version="true"
            use="true"
            windowtitle="${artifactId} ${labkey.version} API"
            doctitle="${artifactId} ${labkey.version} API"
            >
            <packageset dir="${source.dir}"/>
            <classpath refid="classpath"/>
        </javadoc>
        <jar jarfile="${maven-javadoc-jar}">
            <fileset dir="${maven-javadoc-dir}" />
        </jar>
        <!-- build the sources artifact -->
        <jar jarfile="${maven-sources-jar}">
            <fileset dir="${source.dir}" />
        </jar>
    </target>

    <!-- ================================================================== -->
    <!-- Deploy to Apache Nexus -->
    <!-- ================================================================== -->
    <target name="deploy" depends="release" description="--> deploy to Sonatype OSSRH">
        <!-- generate a pom file -->
        <!--ivy:makepom ivyfile="${ivy.file}" pomfile="${basedir}/pom.xml" templatefile="${basedir}/mvn.template">
            <mapping conf="default" scope="compile"/>
            <mapping conf="runtime" scope="runtime"/>
        </ivy:makepom-->
        <!-- sign and deploy the main artifact -->
        <artifact:mvn mavenHome="${env.M2_HOME}">
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file" />
            <arg value="-Durl=${maven-repository-url}" />
            <arg value="-DrepositoryId=${maven-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${maven-jar}" />
            <arg value="-Papache-release" />
        </artifact:mvn>
        <!-- sign and deploy the sources artifact -->
        <artifact:mvn mavenHome="${env.M2_HOME}">
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file" />
            <arg value="-Durl=${maven-repository-url}" />
            <arg value="-DrepositoryId=${maven-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${maven-sources-jar}" />
            <arg value="-Dclassifier=sources" />
            <arg value="-Papache-release" />
        </artifact:mvn>
        <!-- sign and deploy the javadoc artifact -->
        <artifact:mvn mavenHome="${env.M2_HOME}">
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file" />
            <arg value="-Durl=${maven-repository-url}" />
            <arg value="-DrepositoryId=${maven-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${maven-javadoc-jar}" />
            <arg value="-Dclassifier=javadoc" />
            <arg value="-Papache-release" />
        </artifact:mvn>
    </target>
    
    <target name="clean" description="--> delete the build artifacts and compiled Java code.">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="compile" description="--> compile and build Java source code.">
        <mkdir dir="${build.classes.dir}"/>
        <!-- Target 1.7, required for compatibility with SAS -->
        <javac srcdir="${source.dir}" destdir="${build.classes.dir}"
               classpathref="component.class.path"
               target="1.7"
               source="1.7"
               debug="true"/>
        <copy file="${source.dir}/log4j.xml" todir="${build.classes.dir}"/>
    </target>

    <target name="jar" depends="compile" description="--> generate the labkey Java .jar artifacts.">
        <mkdir dir="${build.jar.dir}"/>
        <jar destfile="${build.jar.dir}/${build.jar.name}" basedir="${build.classes.dir}"/>
    </target>

    <target name="javadoc" description="--> build the Java API documentation.">
        <javadoc sourcepath="${source.dir}" destdir="${doc.dir}" classpathref="component.class.path"
                 windowtitle="LabKey Client API Library for Java Documentation"
                 author="true" version="true" packagenames="org.labkey.remoteapi.*"
                 excludepackagenames="org.labkey.remoteapi.sas,org.labkey.remoteapi.test,org.labkey.remoteapi.query.jdbc"/>
    </target>

    <target name="dist" depends="build,javadoc" description="--> build the packaged distribution.">
        <delete file="${dist.dir}/${zip.name}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${exploded.dir}"/>
        <mkdir dir="${exploded.ver.dir}"/>
        <copy file="${build.jar.dir}/${build.jar.name}" tofile="${exploded.ver.dir}/${build.jar.name}"/>
        <copy todir="${exploded.ver.dir}/lib/">
            <fileset dir="lib" includes="*.jar"/>
        </copy>
        <copy file="${readme.file}" tofile="${exploded.ver.dir}/${readme.file}"/>
        <zip basedir="${exploded.dir}" destfile="${dist.dir}/${zip.name}"/>

        <delete file="${dist.dir}/${source.zip.name}"/>
        <mkdir dir="${dist.source.dir}"/>
        <copy todir="${dist.source.dir}">
            <fileset dir="src"/>
        </copy>
        <zip basedir="${build.source.dir}" destfile="${dist.dir}/${source.zip.name}"/>

        <!-- Create a stable file name so that TeamCity can serve it up directly through its own UI -->
        <zip basedir="${doc.dir}" destfile="${basedir}/../../dist/TeamCity-ClientAPI-Java-Docs.zip"/>

        <one-jar destfile="${dist.dir}/${build.jar.complete.name}" manifest="manifest.mf">
            <main>
                <!-- Construct main.jar from classes and source code -->
                <fileset dir="${build.dir}/classes"/>
            </main>
            <lib>
                <fileset file="./lib/*.jar" />
            </lib>
        </one-jar>
    </target>

    <target name="build" description="--> build the .jar artifact if it is not up-to-date.">
        <uptodate property="remoteapi_uptodate" targetfile="${build.jar.dir}/${build.jar.name}">
            <srcfiles dir="${source.dir}"/>
        </uptodate>
        <antcall target="build_if_dirty"/>
    </target>

    <target name="build_if_dirty" unless="remoteapi_uptodate" description="--> build the .jar artifact if source code is dirty.">
        <antcall target="jar"/>
    </target>

    <target name="rebuild" depends="clean,build" description="--> clean and then rebuild the .jar artifact."/>

</project>
