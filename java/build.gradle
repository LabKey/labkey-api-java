apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.labkey.simpleModule'

import org.labkey.gradle.plugin.LabKey
import org.labkey.gradle.util.GroupNames

buildDir = "${rootProject.buildDir}/client-api/java/"

dependencies {
    compile "commons-codec:commons-codec:${commonsCodecVersion}"
    compile "commons-logging:commons-logging:${commonsLoggingVersion}"
    compile "org.apache.httpcomponents:fluent-hc:${fluentHcVersion}"
    compile "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    compile "org.apache.httpcomponents:httpclient-cache:${httpclientVersion}"
    compile "org.apache.httpcomponents:httpcore:${httpcoreVersion}"
    compile "org.apache.httpcomponents:httpmime:${httpmimeVersion}"
    compile "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}"
    compile "net.sf.opencsv:opencsv:${opencsvVersion}"
}

jar {
    baseName 'labkey-client-api'

    sourceCompatibility = labkey.sourceCompatibility
    targetCompatibility = labkey.targetCompatibility

    sourceSets
            {
                main {
                    java {
                        srcDirs = ['src']
                    }
                }
            }

    libsDirName = "jar"
}

project.task('javadocJar', description: "Generate jar file of javadoc files", type: Jar) {
            from project.tasks.javadoc.destinationDir
            group GroupNames.DISTRIBUTION
            baseName "${project.name}_${LabKey.JAVADOC_CLASSIFIER}"
            classifier LabKey.JAVADOC_CLASSIFIER
            dependsOn project.tasks.javadoc
        }

project.task('sourcesJar', description: "Generate jar file of source files", type: Jar) {
            from project.sourceSets.main.allJava

            group GroupNames.DISTRIBUTION
            baseName "${project.name}_${LabKey.SOURCES_CLASSIFIER}"
            classifier LabKey.SOURCES_CLASSIFIER
        }

publishing {
    publications {
        libs(MavenPublication) {
            from components.java
            artifactId 'labkey-client-api'
            pom.withXml {
                def orgNode = asNode().appendNode("organization")
                orgNode.appendNode("name", "LabKey")
                orgNode.appendNode("url", "http://www.labkey.org")
                asNode().appendNode("description", "The client-side library for Java developers is a separate JAR from the LabKey Server code base. It can be used by any Java program, including another Java web application.")
                asNode().appendNode("url","https://www.labkey.org/wiki/home/Documentation/page.view?name=javaAPI")
                def licenseNode = asNode().appendNode("licenses").appendNode("license")
                licenseNode.appendNode("name", "The Apache Software License, Version 2.0")
                licenseNode.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")
                licenseNode.appendNode("distribution", "repo")
            }
        }
    }
}

model {
    tasks.generatePomFileForLibsPublication {
        destination = file("$projectDir/generated-pom.xml")
    }
}

// TODO finish conversion of the build process, which should be just the dist task(s)
ant.importBuild("build.xml")  { antTargetName ->

    if (['assemble', 'build', 'buildDependents', 'buildNeeded', 'classes', 'clean',
         'jar', 'testClasses', 'init', 'wrapper', 'javadoc', 'buildEnvironment', 'components',
         'dependencies', 'dependencyInsight', 'help', 'model', 'projects', 'properties', 'tasks', 'check', 'test'
    ].contains(antTargetName))
    {
        return 'ant_' + antTargetName;
    }
    else
    {
        return antTargetName
    }
}