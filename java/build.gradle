apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'


import org.labkey.gradle.plugin.LabKey
import org.labkey.gradle.task.PomFile
import org.labkey.gradle.util.GroupNames

dependencies {
    compile "commons-codec:commons-codec:${commonsCodecVersion}"
    compile "commons-logging:commons-logging:${commonsLoggingVersion}"
    compile "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    compile "org.apache.httpcomponents:httpcore:${httpcoreVersion}"
    compile "org.apache.httpcomponents:httpmime:${httpmimeVersion}"
    compile ("com.googlecode.json-simple:json-simple:${jsonSimpleVersion}")
            {
                // exclude this because it gets in the way of our own JSON object implementations from server/api
                exclude group: "org.json", module:"json"
            }
    compile "net.sf.opencsv:opencsv:${opencsvVersion}"
}

jar {
    baseName 'labkey-client-api'

    sourceCompatibility = labkey.sourceCompatibility
    targetCompatibility = labkey.targetCompatibility

    sourceSets
            {
                main {
                    java {
                        srcDirs = ['src']
                    }
                }
            }

    libsDirName = "jar"
}

project.task("fatJar",
        description: "Generate single jar file containing the api and all its dependent classes",
        group: GroupNames.BUILD,
        type: Jar,
        {
            Jar jar ->
                jar.from sourceSets.main.output
                jar.from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
                jar.baseName "labkey-client-api"
                jar.version project.version
                jar.classifier LabKey.FAT_JAR_CLASSIFIER
                jar.dependsOn project.tasks.jar
        }
)

project.task('javadocJar', description: "Generate jar file of javadoc files", type: Jar) {
            from project.tasks.javadoc.destinationDir
            group GroupNames.DISTRIBUTION
            baseName 'labkey-client-api'
            classifier LabKey.JAVADOC_CLASSIFIER
            dependsOn project.tasks.javadoc
        }

project.task('javadocZip', description: "Generate zip file with javadoc files for TeamCity artifact", group: GroupNames.DOCUMENTATION, type: Zip, {
    Zip zip ->
        zip.archiveName = "TeamCity-ClientAPI-Java-Docs.zip" // we use a non-versioned name here so TeamCity can recognize it
        zip.from project.tasks.javadoc.destinationDir
        zip.destinationDir = project.rootProject.file("dist")
        zip.dependsOn project.tasks.javadoc
})

project.task('sourcesJar', description: "Generate jar file of source files", type: Jar) {
            from project.sourceSets.main.allJava

            group GroupNames.DISTRIBUTION
            baseName 'labkey-client-api'
            classifier LabKey.SOURCES_CLASSIFIER
        }

Properties pomProperties = new Properties()
pomProperties.put("ArtifactId", "labkey-client-api")
pomProperties.put("Organization", "LabKey")
pomProperties.put("OrganizationURL", "http://www.labkey.org")
pomProperties.put("Description","The client-side library for Java developers is a separate JAR from the LabKey Server code base. It can be used by any Java program, including another Java web application." )
pomProperties.put("License", "The Apache Software License, Version 2.0")
pomProperties.put("LicenseURL", "http://www.apache.org/licenses/LICENSE-2.0.txt")

project.afterEvaluate {
    Task pomFileTask = project.task("pomFile",
            group: GroupNames.PUBLISHING,
            description: "create the pom file for this project",
            type: PomFile,
            {
                PomFile pom ->
                    pom.pomProperties = pomProperties
            }
    )
    project.publishing {
        publications {
            libs(MavenPublication) {
                project.tasks.each {
                    if (it instanceof Jar)
                    {
                        artifactId 'labkey-client-api'
                        artifact it
                    }
                }
            }
        }

        project.artifactoryPublish {
            project.tasks.each {
                if (it instanceof Jar)
                {
                    dependsOn it
                }
            }
            dependsOn pomFileTask
            publications('libs')
        }

    }
}